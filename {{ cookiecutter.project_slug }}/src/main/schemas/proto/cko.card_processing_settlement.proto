syntax = "proto3";
package cko.card_processing_settlement;

option java_multiple_files = true;
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "money.proto";
import "cko.proto";

message GatewayStateRecord {
  string payment_id = 1 [(cko.doc) = "Payment Id as a guid. Mapped from chargeId in ChargeRequested"];
  string action_id = 2; //C, R etc.
  string entity_id = 3; //ChargeRequested
  string client_id = 4; //ChargeRequested
  string acquirer_reference_number = 5; //ChargeCaptured
  google.protobuf.Timestamp charge_requested_on = 6; //ChargeRequested
  google.protobuf.Timestamp charge_processed_on = 7; // Capture or Refund or Partial Capture or Partial Refund

  RefundType refund_type = 9;
  enum RefundType {
    REFUND_TYPE_UNSPECIFIED = 0;
    REFERENCED = 1;
    UNREFERENCED = 2;
  }

  Status status = 10;
  enum Status {
    STATUS_UNSPECIFIED = 0;
    REFUND = 1;
    CAPTURE = 2;
    PARTIAL_REFUND = 3;
    PARTIAL_CAPTURE = 4;
    //Payout?
  }

  string issuing_country = 11; //ChargeRequested
  string acquirer_country = 12; //ChargeCaptured
  string acquirer_name = 13; //ChargeCaptured
  string acquirer_bin = 14; //ChargeCaptured
  string global_acquirer_id = 15; //ChargeCaptured
  Scheme scheme = 16; //ChargeRequested
  Money processing_amount = 17; //C R etc.
  string event_id = 18; // -
}

message Money {
  string currency_iso3_code = 1;
  double amount = 2;
}

enum Scheme {
  SCHEME_UNSPECIFIED = 0;
  VISA = 1;
  MASTERCARD = 2;
  AMEX = 3;
  JCN = 4;
  DISCOVER = 5;
  DCI = 6;
  DINERS = 7;
  UPI = 8;
  JCB = 9;
  DINERSCLUB = 10;
  CARTES_BANCAIRES = 11;
}

//###################### Settlement Event Start ######################

message SettlementEvent {
  string acquirer_reference_number = 1                            [(cko.doc) = "Used for joining settlement events to GW events"];
  string correlation_id = 2                                       [(cko.doc) = "Used in logs by downstream services to correlate logs across service boundaries"];
  google.protobuf.Timestamp event_timestamp = 3                   [(cko.doc) = "UTC Timestamp when the event was created"];
  string idempotency_key = 4                                      [(cko.doc) = "A unique identifier of the event. Should be used for deduplication"];
  string original_file_name = 5                                   [(cko.doc) = "Scheme settlement file name from where the event originated"];
  string primary_key = 6                                          [(cko.pk) = true, (cko.doc) = "Provided by the scheme loader. The original event and all its corrections will have the same Primary Key"];
  Scheme scheme = 7                                              [(cko.doc) = "Scheme identifier"];
  string original_file_line_number = 8                            [(cko.doc) = "Scheme settlement file line number from where the event originated"];
  EventType event_type = 9                                        [(cko.doc) = "Shows which kind of event is used in event_data"];

  google.protobuf.BoolValue is_correction = 20                     [(cko.doc) = "When present, can be used to decide if previous events with the same primary_key existed."];
  string settlement_country = 21                                  [(cko.doc) = "Country of the entity that is being settled"];

  oneof event_data {
    Settlement settlement = 10                                   [(cko.doc) = "Contents of Settlement specific event"];
    Receival receival = 11                                       [(cko.doc) = "Contents of Receival specific event"];
    Failure failure = 12                                         [(cko.doc) = "Contents of Failure specific event"];
    NonTransactionalSettlement non_transactional_settlement = 13  [(cko.doc) = "Contents of Non Transactional Settlement specific event"];
  };
}

message Settlement {
  SettlementType settlement_type = 1                              [(cko.doc) = "Type of settlement, example: PRESENTMENT_SETTLED"];
  repeated Fee fee = 2                                            [(cko.doc) = "List of fees associated with the settlement"];
  google.type.Money processing_amount = 3                         [(cko.doc) = "Processing amount of the transaction"];
  google.type.Money net_settlement_amount = 4                     [(cko.doc) = "Net amount of the settlement"];
  google.type.Money gross_settlement_amount = 5                   [(cko.doc) = "Gross amount of the settlement"];

  google.protobuf.Timestamp predicted_value_date = 6              [(cko.doc) = "Expected value date provided by the scheme"];
  google.protobuf.Timestamp release_date = 11                      [(cko.doc) = "Date when the money was released by the scheme (bank transfer initiated)"];
  google.protobuf.Timestamp central_processing_date = 7           [(cko.doc) = "Central processing date provided by the scheme"];

  string settlement_service_name = 8                              [(cko.doc) = "Settlement service name"];

  OriginatorType originator = 9                                   [(cko.doc) = "Used when settlement_type is FEE_COLLECTION_TRANSACTIONAL"];
  Dispute dispute = 10                                             [(cko.doc) = "Optional, used when settlement_type is CHARGEBACK_SETTLED/SECOND_PRESENTMENT_SETTLED"];

  string bank_batch_id = 20                                        [(cko.doc) = "The key to use to join to cash data"];
}

message Receival {
  ReceivalType receival_type = 1                                  [(cko.doc) = "Type of receival, example: RETRIEVAL_REQUEST_RECEIVED"];
  google.type.Money amount = 2                                    [(cko.doc) = "Amount of the receival"];
  google.protobuf.Timestamp received_on = 4                       [(cko.doc) = "Timestamp when the receival was received by the scheme"];
  Dispute dispute = 10;
}

message Failure {
  FailureType failure_type = 1                                    [(cko.doc) = "Type of failure, example: PRESENTMENT_FAILED"];
  google.type.Money processing_amount = 2                         [(cko.doc) = "Processing amount of the failure"];
  string reason_code = 3                                          [(cko.doc) = "Reason code for the failure from scheme"];
  string reason_message = 4                                       [(cko.doc) = "Reason message for the failure"];
  google.protobuf.Timestamp failed_on = 5                         [(cko.doc) = "Timestamp when the failure was created by the scheme"];
}

message NonTransactionalSettlement {
  google.type.Money amount = 1                                    [(cko.doc) = "Amount of the non transactional settlement"];
  google.protobuf.Timestamp central_processing_date = 2           [(cko.doc) = "Central processing date provided by the scheme"];
  string bank_batch_id = 3                                        [(cko.doc) = "The key to use to join to cash data"];
  string message_text = 4                                         [(cko.doc) = "Message text"];
  string reason_code = 5                                          [(cko.doc) = "Reason code"];
  google.protobuf.Timestamp received_on = 6                       [(cko.doc) = "Timestamp when the non transactional settlement was received"];
  OriginatorType originator = 7                                   [(cko.doc) = "Defines if the settlement originates from issuer or acquirer"];
  google.protobuf.Timestamp predicted_value_date = 8              [(cko.doc) = "Expected value date provided by the scheme"];
  google.protobuf.Timestamp release_date = 9                     [(cko.doc) = "Date when the money was released by the scheme (bank transfer initiated)"];
}

message Fee {
  FeeType fee_type = 1                                            [(cko.doc) = "CKO specific fee type, example: INTERCHANGE_FEE"];
  string fee_code = 2                                             [(cko.doc) = "Scheme specific fee code"];
  google.type.Money precise_amount = 3                            [(cko.doc) = "Precise fee amount with >2 decimal points "];
  google.type.Money rounded_amount = 5                            [(cko.doc) = "Rounded fee amount"];
  google.type.Money tax_amount = 4                                [(cko.doc) = "Optional, Fee tax amount"];
}

message Dispute {
  string scheme_case_number = 1;
  string reason_code = 2;
}

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  SETTLEMENT = 1;
  RECEIVAL = 2;
  FAILURE = 3;
  NON_TRANSACTIONAL_SETTLEMENT = 4;
}

enum ReceivalType {
  RECEIVAL_TYPE_UNSPECIFIED = 0;
  RETRIEVAL_REQUEST_RECEIVED = 1;
  SECOND_PRESENTMENT_ADVICE_RECEIVED = 2;
}

enum FailureType {
  FAILURE_TYPE_UNSPECIFIED = 0;
  PRESENTMENT_FAILED = 1;
  PRESENTMENT_REJECTED = 2;
}

enum SettlementType {
  SETTLEMENT_TYPE_UNSPECIFIED = 0;
  PRESENTMENT_SETTLED = 1;
  PRESENTMENT_REVERSAL_SETTLED = 2;
  CHARGEBACK_SETTLED = 3;
  SECOND_PRESENTMENT_SETTLED = 4;
  FEE_COLLECTION_TRANSACTIONAL = 5;
}

enum FeeType {
  FEE_TYPE_UNSPECIFIED = 0;
  TAX = 1;
  INTERCHANGE_FEE = 2;
  SCHEME_FEE = 3;
}

enum OriginatorType {
  ORIGINATOR_UNSPECIFIED = 0;
  ISSUER = 1;
  ACQUIRER = 2;
}


//###################### Settlement Event End ######################

//DEPRECATED, DO NOT USE
enum PublicSettlementEventStatus {
  MATCHED = 0;
  SETTLEMENT_NOT_MATCHED = 1;
  SETTLEMENT_EXPIRED = 2;
  SETTLEMENT_NOT_ARRIVED_IN_TIME = 3;
}

//DEPRECATED, DO NOT USE
message PublicSettlementEvent {
  GatewayStateRecord gatewayData = 1;
  SettlementEvent settlementData = 2;
  PublicSettlementEventStatus resultStatus = 3;
}
syntax = "proto3";
package cko.card_processing_settlement;

option java_multiple_files = true;
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "cko.card_processing_settlement.proto";
import "money.proto";
import "cko.proto";

message SettlementEventPublic {
  string primary_key = 1                                          [(cko.pk) = true, (cko.doc) = "Provided by the scheme loader. The original event and all its corrections will have the same Primary Key"];
  string idempotency_key = 2                                      [(cko.doc) = "A unique identifier of the event. Should be used for deduplication"];
  string correlation_id = 3                                       [(cko.doc) = "Used in logs by downstream services to correlate logs across service boundaries"];
  google.protobuf.BoolValue is_correction = 4                     [(cko.doc) = "When present, can be used to decide if previous events with the same primary_key existed."];
  google.protobuf.Timestamp loader_event_timestamp = 5            [(cko.doc) = "UTC Timestamp when the event was created upstream by the SDP Loader"];
  google.protobuf.Timestamp event_timestamp = 6                   [(cko.doc) = "UTC Timestamp when the event was created"];
  string original_file_name = 7                                   [(cko.doc) = "Scheme settlement file name from where the event originated"];
  string original_file_line_number = 8                            [(cko.doc) = "Scheme settlement file line number from where the event originated"];
  cko.card_processing_settlement.Scheme scheme = 9                [(cko.doc) = "Scheme identifier"];
  string settlement_country = 10                                  [(cko.doc) = "Country of the entity that is being settled"];
  string acquirer_reference_number = 11                           [(cko.doc) = "Used for joining settlement events to GW events. Null for non-transactional events"];

  GatewayData gateway_data = 20                                   [(cko.doc) = "Gateway data related to this settlement if it is transactional"];
  TransactionType transaction_type = 21                           [(cko.doc) = "The transaction type"];


  EventType event_type = 30                                       [(cko.doc) = "Shows which kind of event is used in event_data"];
  oneof public_event_data {
    Settlement settlement = 100                                   [(cko.doc) = "Contents of Settlement specific event"];
    Receival receival = 101                                       [(cko.doc) = "Contents of Receival specific event"];
    Failure failure = 102                                         [(cko.doc) = "Contents of Failure specific event"];
    NonTransactionalSettlement non_transactional_settlement = 103 [(cko.doc) = "Contents of Non Transactional Settlement specific event"];
  };
}


message GatewayData {
  string payment_id = 1                                            [(cko.doc) = "Payment Id as a UUID"];
  string action_id = 2                                             [(cko.doc) = "Action Id as a UUID"];
  string entity_id = 3                                             [(cko.doc) = "Entity Id encoded"];
  string client_id = 4                                             [(cko.doc) = "Client Id encoded"];
  google.protobuf.Timestamp requested_on = 6                       [(cko.doc) = "UTC Timestamp when the payment was initially requested in GW"];
  google.protobuf.Timestamp processed_on = 7                       [(cko.doc) = "UTC Timestamp when this action happened"];
  string issuing_country = 8                                       [(cko.doc) = "Country of the card issuer"];
  string acquirer_country = 9                                      [(cko.doc) = "Country of the acquiring entity"];
  string acquirer_name = 10                                        [(cko.doc) = "The name of the acquirer"];
  string acquirer_bin = 11                                         [(cko.doc) = "The acquiring bin used for this payment"];
  google.type.Money processing_amount = 12                         [(cko.doc) = "The amount paid by the payee/cardholder"];
}

enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  CAPTURE = 1;
  AFT_CAPTURE = 2;
  REFUND = 3;
  PAY_TO_CARD = 4;
  CHARGEBACK = 5;
  REPRESENTMENT = 6;
  FEE_COLLECTION = 7;
  PAY_TO_CARD_CHARGEBACK = 8;
  CAPTURE_REVERSAL = 9;
  PAY_TO_CARD_REVERSAL = 10;
  REFUND_CHARGEBACK_REVERSAL = 11;
  CHARGEBACK_REVERSAL = 12;
  ADJUSTMENT_NOT_PAID_DUE_TO_DEBIT_POSITION = 13;
  REPRESENTMENT_REVERSAL = 14;
  ADJUSTMENT_PREVIOUS_DEBIT = 15;
  REFUND_REVERSAL = 16;
  CAPTURE_CHARGEBACK_REVERSAL = 17;
  REFUND_CHARGEBACK = 18;
  ARBITRATION_CHARGEBACK = 19;
  RETURN_ITEMS_BEING_DEDUCTED = 20;
  RETURN_ITEMS_ADJUSTMENT = 21;
  CAPTURE_CHARGEBACK = 22;
  AFT_CHARGEBACK_REVERSAL = 23;
  FUND_DISBURSEMENT = 24;
  AFT_CHARGEBACK = 25;
  VISA_CHARGES = 26;
  CAPTURE_OR_REPRESENTMENT_REVERSAL = 27;
  AFT_REFUND = 28;
}




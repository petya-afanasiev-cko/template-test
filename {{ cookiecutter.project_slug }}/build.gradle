plugins {
    id 'java'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.palantir.git-version' version '3.1.0'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'com.google.protobuf' version '0.9.4'
    id 'de.undercouch.download' version '5.6.0'
}

group = 'com.checkout'
version = gitVersion()
def codeartifactToken = System.getenv("CODEARTIFACT_AUTH_TOKEN") ?: "aws codeartifact get-authorization-token --domain cko-dp --domain-owner 791259062566 --query authorizationToken --output text --region eu-west-1".execute().text

ext {
    commonVersion = '0.0.9'
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
    maven {
        url 'https://cko-packages-791259062566.d.codeartifact.eu-west-1.amazonaws.com/maven/cko-packages/'
        credentials {
            username "aws"
            password codeartifactToken
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.integration:spring-integration-kafka'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation "com.checkout.sdp:sdp-loader-common:${commonVersion}"
    implementation 'io.confluent:kafka-protobuf-serializer:7.8.0'

    implementation platform('software.amazon.awssdk:bom:2.29.52')
    implementation 'software.amazon.awssdk:url-connection-client'
    implementation 'software.amazon.awssdk:s3'
    
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.datadoghq:dd-trace-api:1.45.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.google.protobuf:protobuf-java:4.29.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.integration:spring-integration-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.assertj:assertj-core:3.27.2'
    testImplementation "com.checkout.sdp:sdp-loader-common:${commonVersion}"

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

springBoot {
    buildInfo()
}

tasks.named("bootJar") {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': version)
    }
}

tasks.named("jar") {
    enabled = false
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("${project.getLayout().getBuildDirectory().get().asFile}/jacoco/${name}.exec")
    }
    testLogging {
        events "failed"
        exceptionFormat = 'full'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
        xml.outputLocation.set(file("${project.getLayout().getBuildDirectory().get().asFile}/jacoco/jacoco.xml"))
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.29.3"
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir "src/main/schemas/proto"
        }
    }
}
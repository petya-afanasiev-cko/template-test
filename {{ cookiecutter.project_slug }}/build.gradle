plugins {
    id 'java'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.palantir.git-version' version '3.1.0'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'com.google.protobuf' version '0.9.4'
    id 'de.undercouch.download' version '5.6.0'
}

group = 'com.checkout'
version = gitVersion()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.integration:spring-integration-kafka'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation platform('software.amazon.awssdk:bom:2.29.45')
    implementation 'software.amazon.awssdk:url-connection-client'
    implementation 'software.amazon.awssdk:s3'
    
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.datadoghq:dd-trace-api:1.44.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.google.protobuf:protobuf-java:4.28.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.integration:spring-integration-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.assertj:assertj-core:3.27.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

springBoot {
    buildInfo()
}

tasks.named("bootJar") {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': version)
    }
}

tasks.named("jar") {
    enabled = false
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('downloadProtoDependancy', Download) {
    src(['https://schemas.cko-dev.ckotech.co/subjects/meta.proto/versions/-1/schema',
         'https://schemas.cko-dev.ckotech.co/subjects/cko.proto/versions/-1/schema'])
    dest 'src/main/schemas/proto/'
    eachFile { f -> f.name = f.sourceURL.path.split('/')[2]
    }
    acceptAnyCertificate true
    overwrite true
    onlyIfModified true
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.3"
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir "src/main/schemas/proto"
        }
    }
}

processResources.dependsOn(downloadProtoDependancy)
generateProto.dependsOn(downloadProtoDependancy)

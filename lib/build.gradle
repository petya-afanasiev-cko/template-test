/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco-report-aggregation'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.palantir.git-version' version '3.1.0'
    id 'com.google.protobuf' version '0.9.4'
    id 'de.undercouch.download' version '5.6.0'

}
group = 'com.checkout.sdp'
version = '0.0.9'

def codeartifactToken = "aws codeartifact get-authorization-token --domain cko-dp --domain-owner 791259062566 --query authorizationToken --output text --region eu-west-1".execute().text

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
    maven {
        url 'https://cko-dp-791259062566.d.codeartifact.eu-west-1.amazonaws.com/maven/cko-gradle/'
        credentials {
            username "aws"
            password codeartifactToken
        }
    }
}
ext {
    sonarTestExclusions = []
}

bootJar {
  enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.integration:spring-integration-kafka'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'io.confluent:kafka-protobuf-serializer:7.8.0'

    implementation platform('software.amazon.awssdk:bom:2.29.52')
    implementation 'software.amazon.awssdk:url-connection-client'
    implementation 'software.amazon.awssdk:s3'

    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.datadoghq:dd-trace-api:1.45.1'

    implementation 'com.google.protobuf:protobuf-java:4.29.3'

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.integration:spring-integration-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.assertj:assertj-core:3.27.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
//    withJavadocJar()
    withSourcesJar()
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'sdp-loader-common'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Settlement Data Pipeline Loader common functionality'
                description 'Base classes and common functionality for the Settlement Data Pipeline Loaders'
                url = 'https://cko-packages-791259062566.d.codeartifact.eu-west-1.amazonaws.com/maven/cko-packages/com.checkout.settlement/sdp-loader-common'
            }
        }
    }
    repositories {
        maven {
            url 'https://cko-packages-791259062566.d.codeartifact.eu-west-1.amazonaws.com/maven/cko-packages/'
            credentials {
                username "aws"
                password codeartifactToken

            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "cko-fort-sdp-loader-common"
    }
}

tasks.named('check') {
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
}

tasks.named('jacocoTestReport') {
    classDirectories.setFrom(files(classDirectories.files.collect { dir ->
        fileTree(dir: dir, exclude: sonarTestExclusions)
    }))
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.register('downloadProtoDependancy', Download) {
    src(['https://schemas.cko-dev.ckotech.co/subjects/meta.proto/versions/6/schema',
         'https://schemas.cko-dev.ckotech.co/subjects/cko.card_processing_settlement.proto/versions/-1/schema',
         'https://schemas.cko-dev.ckotech.co/subjects/cko.card_processing_settlement_data_controls.proto/versions/-1/schema',
         'https://schemas.cko-dev.ckotech.co/subjects/cko.card_processing_settlement_dci.proto/versions/-1/schema',
         'https://schemas.cko-dev.ckotech.co/subjects/cko.card_processing_settlement_visa.proto/versions/-1/schema',
         'https://schemas.cko-dev.ckotech.co/subjects/cko.proto/versions/-1/schema'])
    dest 'src/main/schemas/proto/'
    eachFile { f -> f.name = f.sourceURL.path.split('/')[2]
    }
    acceptAnyCertificate true
    overwrite true
    onlyIfModified true
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.29.3"
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir "src/main/schemas/proto"
        }
    }
}
